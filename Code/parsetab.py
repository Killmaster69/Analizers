
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and chambea coma corro divide elpepe equal ete greater greater_equal lcolon less less_equal lore lparen me minus minusminus muchotexto not_equal num or plus plusplus rcolon rparen setch times varprogram : me instructions corroinstructions : instructions instructioninstructions : instructioninstruction : loreI\n                   | eteI\n                   | muchotextoI\n    loreI : var lore arg1\n             | var lore arg1 extralore\n    arg1 : num\n            | var\n    extralore : operator arg1\n                 | operator arg1 extralore\n    operator : plus\n                | minus\n                | times\n                | divide\n    eteI : ete lparen conditional rparen lcolon instructions rcolon\n            | ete lparen conditional rparen lcolon instructions rcolon setchI\n    conditional : arg1 condition arg1\n                   | arg1 condition arg1 logical conditional\n    condition : greater\n                 | equal\n                 | less\n                 | greater_equal\n                 | less_equal\n                 | not_equal\n    logical : and\n                 | or\n    setchI : setch lcolon instructions rcolon\n    muchotextoI : muchotexto lparen arg1 rparen\n                   | muchotexto lparen arg1 coma arg1 rparen\n    chambeaI : chambea lparen lore coma conditional coma additive rparen lcolon instructions rcolon\n    additive : plusplus\n                | minusminus\n    '
    
_lr_action_items = {'me':([0,],[2,]),'$end':([1,11,],[0,-1,]),'var':([2,3,4,5,6,7,12,13,14,15,16,17,18,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,52,53,54,],[8,8,-3,-4,-5,-6,-2,16,16,16,-10,-7,-9,-8,16,-13,-14,-15,-16,16,-21,-22,-23,-24,-25,-26,-30,16,-11,8,-12,8,16,-27,-28,-31,-17,-18,8,8,-29,]),'ete':([2,3,4,5,6,7,12,16,17,18,22,36,38,39,42,43,47,48,50,52,53,54,],[9,9,-3,-4,-5,-6,-2,-10,-7,-9,-8,-30,-11,9,-12,9,-31,-17,-18,9,9,-29,]),'muchotexto':([2,3,4,5,6,7,12,16,17,18,22,36,38,39,42,43,47,48,50,52,53,54,],[10,10,-3,-4,-5,-6,-2,-10,-7,-9,-8,-30,-11,10,-12,10,-31,-17,-18,10,10,-29,]),'corro':([3,4,5,6,7,12,16,17,18,22,36,38,42,47,48,50,54,],[11,-3,-4,-5,-6,-2,-10,-7,-9,-8,-30,-11,-12,-31,-17,-18,-29,]),'rcolon':([4,5,6,7,12,16,17,18,22,36,38,42,43,47,48,50,53,54,],[-3,-4,-5,-6,-2,-10,-7,-9,-8,-30,-11,-12,48,-31,-17,-18,54,-29,]),'lore':([8,],[13,]),'lparen':([9,10,],[14,15,]),'num':([13,14,15,23,24,25,26,27,29,30,31,32,33,34,35,37,44,45,46,],[18,18,18,18,-13,-14,-15,-16,18,-21,-22,-23,-24,-25,-26,18,18,-27,-28,]),'plus':([16,17,18,38,],[-10,24,-9,24,]),'minus':([16,17,18,38,],[-10,25,-9,25,]),'times':([16,17,18,38,],[-10,26,-9,26,]),'divide':([16,17,18,38,],[-10,27,-9,27,]),'greater':([16,18,20,],[-10,-9,30,]),'equal':([16,18,20,],[-10,-9,31,]),'less':([16,18,20,],[-10,-9,32,]),'greater_equal':([16,18,20,],[-10,-9,33,]),'less_equal':([16,18,20,],[-10,-9,34,]),'not_equal':([16,18,20,],[-10,-9,35,]),'rparen':([16,18,19,21,40,41,49,],[-10,-9,28,36,-19,47,-20,]),'coma':([16,18,21,],[-10,-9,37,]),'and':([16,18,40,],[-10,-9,45,]),'or':([16,18,40,],[-10,-9,46,]),'lcolon':([28,51,],[39,52,]),'setch':([48,],[51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([2,39,52,],[3,43,53,]),'instruction':([2,3,39,43,52,53,],[4,12,4,12,4,12,]),'loreI':([2,3,39,43,52,53,],[5,5,5,5,5,5,]),'eteI':([2,3,39,43,52,53,],[6,6,6,6,6,6,]),'muchotextoI':([2,3,39,43,52,53,],[7,7,7,7,7,7,]),'arg1':([13,14,15,23,29,37,44,],[17,20,21,38,40,41,20,]),'conditional':([14,44,],[19,49,]),'extralore':([17,38,],[22,42,]),'operator':([17,38,],[23,23,]),'condition':([20,],[29,]),'logical':([40,],[44,]),'setchI':([48,],[50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> me instructions corro','program',3,'p_program','SintacticAnalyzer.py',11),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_multiple','SintacticAnalyzer.py',15),
  ('instructions -> instruction','instructions',1,'p_instructions_single','SintacticAnalyzer.py',19),
  ('instruction -> loreI','instruction',1,'p_instruction','SintacticAnalyzer.py',23),
  ('instruction -> eteI','instruction',1,'p_instruction','SintacticAnalyzer.py',24),
  ('instruction -> muchotextoI','instruction',1,'p_instruction','SintacticAnalyzer.py',25),
  ('loreI -> var lore arg1','loreI',3,'p_lore','SintacticAnalyzer.py',29),
  ('loreI -> var lore arg1 extralore','loreI',4,'p_lore','SintacticAnalyzer.py',30),
  ('arg1 -> num','arg1',1,'p_lorexpr','SintacticAnalyzer.py',36),
  ('arg1 -> var','arg1',1,'p_lorexpr','SintacticAnalyzer.py',37),
  ('extralore -> operator arg1','extralore',2,'p_extralore','SintacticAnalyzer.py',43),
  ('extralore -> operator arg1 extralore','extralore',3,'p_extralore','SintacticAnalyzer.py',44),
  ('operator -> plus','operator',1,'p_operator','SintacticAnalyzer.py',50),
  ('operator -> minus','operator',1,'p_operator','SintacticAnalyzer.py',51),
  ('operator -> times','operator',1,'p_operator','SintacticAnalyzer.py',52),
  ('operator -> divide','operator',1,'p_operator','SintacticAnalyzer.py',53),
  ('eteI -> ete lparen conditional rparen lcolon instructions rcolon','eteI',7,'p_ete','SintacticAnalyzer.py',59),
  ('eteI -> ete lparen conditional rparen lcolon instructions rcolon setchI','eteI',8,'p_ete','SintacticAnalyzer.py',60),
  ('conditional -> arg1 condition arg1','conditional',3,'p_conditional','SintacticAnalyzer.py',65),
  ('conditional -> arg1 condition arg1 logical conditional','conditional',5,'p_conditional','SintacticAnalyzer.py',66),
  ('condition -> greater','condition',1,'p_condition','SintacticAnalyzer.py',71),
  ('condition -> equal','condition',1,'p_condition','SintacticAnalyzer.py',72),
  ('condition -> less','condition',1,'p_condition','SintacticAnalyzer.py',73),
  ('condition -> greater_equal','condition',1,'p_condition','SintacticAnalyzer.py',74),
  ('condition -> less_equal','condition',1,'p_condition','SintacticAnalyzer.py',75),
  ('condition -> not_equal','condition',1,'p_condition','SintacticAnalyzer.py',76),
  ('logical -> and','logical',1,'p_logical','SintacticAnalyzer.py',82),
  ('logical -> or','logical',1,'p_logical','SintacticAnalyzer.py',83),
  ('setchI -> setch lcolon instructions rcolon','setchI',4,'p_setch','SintacticAnalyzer.py',89),
  ('muchotextoI -> muchotexto lparen arg1 rparen','muchotextoI',4,'p_muchotexto','SintacticAnalyzer.py',95),
  ('muchotextoI -> muchotexto lparen arg1 coma arg1 rparen','muchotextoI',6,'p_muchotexto','SintacticAnalyzer.py',96),
  ('chambeaI -> chambea lparen lore coma conditional coma additive rparen lcolon instructions rcolon','chambeaI',11,'p_chambea','SintacticAnalyzer.py',101),
  ('additive -> plusplus','additive',1,'p_Additive','SintacticAnalyzer.py',106),
  ('additive -> minusminus','additive',1,'p_Additive','SintacticAnalyzer.py',107),
]
